// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  phone      String?  @unique
  name       String
  role       Role     @default(USER)
  password   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isVerified Boolean  @default(false)
  verify     Verify?
  cart       Cart?
  token      Token?
  order      Order[]
}

model Verify {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  expiredAt   DateTime?
  verifyToken String?  @unique
}

model Token {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  expiredAt DateTime?
  token     String?
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  quantity  Int
  total     Int
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId    String   @unique
}

model Menu {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  price       Int
  image       String
  description String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItem    CartItem?
  orderItem   OrderItem[]
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  menus     Menu[]
}

model Order {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  total     Int         @default(0)
  items     OrderItem[]
  payment   Payment?
}

model Payment {
  id                String   @id @default(uuid())
  order             Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           String   @unique
  status            String?
  method            String?
  snap_token        String?
  snap_redirect_url String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  menuId    String
  quantity  Int
  total     Int
}
